---

workflow:
  rules:
    - if: $CI_MERGE_REQUEST_ID
      when: never
    - if: '$CI_PIPELINE_SOURCE == "merge_request_event"'
      when: always
    - if: '$CI_PIPELINE_SOURCE == "push"'
      when: always
    - if: '$CI_PIPELINE_SOURCE =~ /^trigger|pipeline|web|api$/'
      when: always
    - if: $CI_COMMIT_TAG
      when: never
    - when: always


include:
  - template: Security/SAST.gitlab-ci.yml
  - template: Dependency-Scanning.gitlab-ci.yml
  - template: Security/License-Scanning.gitlab-ci.yml
  - template: Security/Secret-Detection.gitlab-ci.yml
  - local: 'ci/semantic-release.yml'

# Global SAST Variables

variables:
  SAST_EXCLUDED_PATHS: "spec,test,tests,tmp,node_modules,target,venv"
  SAST_BANDIT_EXCLUDED_PATHS: "*/test/**,*/tests/**,*/node_modules/**,*/target/**,*/venv/**"
  SECRET_DETECTION_EXCLUDED_PATHS: "docs"
  PYTHON_IMAGE: "python"
  PYTHON_TAG: "3.10"

  ## Semantic Release
  ENABLE_SEMANTIC_RELEASE: "true"
  ENABLE_SEMANTIC_RELEASE_DRY_RUN: "true"

stages:
- build
- test
- deploy
- publish

.base-python:
  image: $PYTHON_IMAGE:$PYTHON_TAG
  before_script:
    - pip install poetry
    - poetry install

###########
# build
###########

build-dist:
  extends: .base-python
  stage: build
  needs: 
    - job: semantic-release:dry-run
      artifacts: true
    - job: generate-mod
      artifacts: true
  script:
    - sed -i -e "s/^__version__ = \".*\"/__version__ = \"$RELEASE_VERSION\"/" ./hoppr_cyclonedx_models/__init__.py 
    - poetry version $RELEASE_VERSION
    - poetry build
  artifacts:
    paths:
      - dist/
      - ./hoppr_cyclonedx_models/__init__.py 
      - pyproject.toml

generate-mod:
  extends: .base-python
  stage: build
  needs: ["semantic-release:dry-run"]
  script:
    - . model-gen.sh
  artifacts:
    paths:
      - $CI_PROJECT_DIR

###########
# test
###########

check-lint:
  extends: .base-python
  stage: test
  needs: []
  script:
    - poetry run pylint ./hoppr_cyclonedx_models

unit-tests:
  extends: .base-python
  stage: test
  needs: []
  script:
    - poetry run coverage run --source=hoppr_cyclonedx_models/ -m pytest --junit-xml=test.xml
    - poetry run coverage report -m
    - poetry run coverage xml --fail-under=95
  coverage: "/TOTAL.+ ([0-9]{1,3}%)/"
  artifacts:
    reports:
      junit:
        - test.xml
      coverage_report:
        coverage_format: cobertura
        path: coverage.xml

###########
# deploy
###########
semantic-release:
  stage: deploy

publish-whl:
  stage: publish
  extends: .base-python
  needs: ["semantic-release", "build-dist"]
  script:
    - poetry config repositories.gitlab "${CI_API_V4_URL}/projects/${CI_PROJECT_ID}/packages/pypi"
    - poetry publish --repository gitlab --username gitlab-ci-token --password "${CI_JOB_TOKEN}"
  artifacts:
    paths:
      - dist/
      - ./hoppr_cyclonedx_models/__init__.py 
      - pyproject.toml
  rules:
    #- if: '$CI_COMMIT_REF_NAME == $CI_DEFAULT_BRANCH && $ENABLE_SEMANTIC_RELEASE == "true" && $CI_PROJECT_NAMESPACE =~ /^lmco/'
    - if: '$CI_COMMIT_REF_NAME != $CI_DEFAULT_BRANCH && $ENABLE_SEMANTIC_RELEASE == "true" && $CI_PROJECT_NAMESPACE =~ /^lmco/'
      when: on_success
    - if: '$CI_PIPELINE_SOURCE == "schedule"'
      when: never

